/*******************************************************************************
*
*  Copyright 2011 Drakenclimber, LLC.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
********************************************************************************
* Revision information.  DO NOT MODIFY.  This is auto-generated by the SCM.
*
* $Date: 2011-11-14 21:44:50 -0600 (Mon, 14 Nov 2011) $
* $Revision: 15 $
*
*******************************************************************************/
/**
* Doxygen comment block
* @file
*
* @brief   Android service to manage the accelerometer in the background 
*
*/

package com.drakenclimber.accelservice;

/*******************************************************************************
 * Imports
 ******************************************************************************/
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Binder;
import android.os.IBinder;
import android.util.Log;

import com.drakenclimber.acceldemo.AccelDemo;
import com.drakenclimber.acceldemo.R;

/*******************************************************************************
 * Classes
 ******************************************************************************/
public class AccelerometerService extends Service implements
        SensorEventListener {
    /***************************************************************************
     * Static Final Variables
     **************************************************************************/
    static final int NOTIFICATION_ID = R.string.accelerometer_service;
    static final String TAG = "AccelSrvc";

    /***************************************************************************
     * Public Variables
     **************************************************************************/

    /***************************************************************************
     * Private Variables
     **************************************************************************/
    private IAccelerometerListener     mListenerCallback = null;
    private Sensor                     mAccelerometer    = null;
    private SensorManager              mSensorManager    = null;
    private final Binder               mBinder           = new LocalBinder();
    private NotificationManager        mNotificationManager = null;

    /***************************************************************************
     * Methods
     **************************************************************************/
    
    /** method to handle the creation of the accelerometer service */
    @Override
    public void onCreate() {
        super.onCreate();

        Log.d(TAG, TAG + " started");

        listenToAccelerometer();
        
        displayNotification();

    } /* onCreate() */

    /** method to handle the destruction of the accelerometer service */
    @Override
    public void onDestroy() {
        super.onDestroy();

        try {
            mNotificationManager.cancelAll();
        }
        catch (Throwable t) {
            Log.d(TAG, "Notification Manager cancel failed");
        }
        
        try {
            mSensorManager.unregisterListener(this);
        }
        catch (Throwable t) {
            Log.d(TAG, "Sensor manager unregister failed.");
        }
        
    } /* onDestroy() */
    

    /** method to handle sensor accuracy */
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        Log.d(TAG, "onAccuracyChanged: " + sensor + ", accuracy: "
                + accuracy);
    }

    /** method to handle new sensor data */
    public void onSensorChanged(SensorEvent event) {
        if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
            Log.d(TAG, String.format("Accel, x %3.1f, y %3.1f, z %3.1f",
                    event.values[0], event.values[1], event.values[2]));

            if (this.mListenerCallback != null) {
                this.mListenerCallback.onDataReceived(event);
            }
        } /* if(event.sensor.getType() == Sensor.TYPE_ACCELEROMETER) */
    }

    /** returns an IBinder through which clients can call on to the service */
    @Override
    public IBinder onBind(Intent intent) {
        return (mBinder);
    }

    /** class to receive data from the invoking activity */
    public class LocalBinder extends Binder implements IAccelerometerMonitor {
        /** register an accelerometer service listener */
        public void registerListener(IAccelerometerListener callback) {
            /* TODO: support multiple listeners */
            mListenerCallback = callback;
        } /* registerListener() */

        /** unregister an accelerometer service listener */
        public void unregisterListener(IAccelerometerListener callback) {
            /* TODO: support multiple listeners */
            mListenerCallback = null;
        } /* unregisterListener() */

    }   /* LocalBinder class */
    
    /** display the notification icon */
    private void displayNotification()
    {
        mNotificationManager = (NotificationManager)getSystemService(NOTIFICATION_SERVICE);
        Notification notification = new Notification(R.drawable.service_running, 
                getText(R.string.accelerometer_service), System.currentTimeMillis());
 
        Intent notificationIntent = new Intent(this, AccelDemo.class);
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntent, 0);
 
        notification.setLatestEventInfo(this, getText(R.string.accelerometer_service),
                getText(R.string.accelerometer_service), pendingIntent);
        
        notification.flags =
                Notification.FLAG_NO_CLEAR | 
                Notification.FLAG_SHOW_LIGHTS | 
                Notification.FLAG_ONGOING_EVENT;
        
        mNotificationManager.notify(NOTIFICATION_ID, notification);
        
    }   /* displayNotification() */
    
    
    /** listen to the accelerometer */
    private void listenToAccelerometer() {
        mSensorManager = (SensorManager) this
                .getSystemService(Context.SENSOR_SERVICE);
        mAccelerometer = mSensorManager
                .getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        
        if (mSensorManager == null
                || mAccelerometer == null
                || !mSensorManager.registerListener(this, mAccelerometer,
                        SensorManager.SENSOR_DELAY_FASTEST)) {
            
            Log.e(TAG, "No accelerometer found.");
            stopSelf();
            
        } /* if(mSensorManager == ... */
    }   /* listenToAccelerometer() */
    
} /* pedometerActivity() class */
